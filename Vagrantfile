$ip = '10.21.6.2'

POST_UP_MSG = <<-EOM
The virtual machine should be running:

   http://%{ip}

To get a shell `vagrant ssh'.  On the VM, run

    `sudo salt-call state.highstate'  after changing salt config

See `salt/pillar/vagrant.sls' for other auto-generated passwords.
EOM

Vagrant.require_version ">= 1.6.0"

# Configuration of vagrant
def configure_vagrant
    Vagrant.configure(2) do |config|
        # Temporary box until there is an official debian/contrib-stretch64.
        config.vm.box = "bas/contrib-stretch64"

        config.vm.hostname = "vagrant-cetana.lan"

        config.vm.synced_folder "salt/states", "/srv/salt", type: "virtualbox"
        config.vm.synced_folder "salt/pillar", "/srv/pillar", type: "virtualbox"
        config.vm.synced_folder ".", "/vagrant", type: "virtualbox"

        config.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.verbose = true
            salt.minion_config = "salt/vagrant_minion_config"
        end

        int = public_interface

        config.vm.network :public_network, :bridge => int if int
        config.vm.network :private_network, ip: $ip


        config.vm.post_up_message = POST_UP_MSG % {
                    ip: $ip,
            }

        # vagrant plugin install vagrant-cachier
        if Vagrant.has_plugin? "vagrant-cachier"
            config.cache.scope = :box
        end
    end
end

# Helpers (eg. generating passwords)
require 'yaml'
require 'securerandom'

def vagrant_pillar
    return YAML.load_file(vagrant_pillar_path)
end

def vagrant_pillar_path
    return File.join(File.dirname(__FILE__), 'salt', 'pillar', 'vagrant.sls')
end

def ensure_pillar_is_generated
    names = ['mysql_mattermost']

    path = vagrant_pillar_path
    return if File.exists?(path) and File.mtime(path) >= File.mtime(__FILE__)

    puts 'Generating passwords ...'
    if File.exists? path
        pillar = YAML.load_file(path)
    else
        pillar = {'secrets' => {}}
    end

    # Generate secrets
    for name in names
        next if pillar['secrets'].include? name
        pillar['secrets'][name] = SecureRandom.hex
    end

    # Some other settings
    pillar['internal-ip'] = $ip

    File.open(path, 'w') do |f|
        f.write "# autogenerated by Vagrantfile"
        YAML.dump pillar, f
    end
end

def public_interface
    path = File.join(File.dirname(__FILE__), '.vagrant-network-interface')
    return false unless File.exists? path
    return File.open(path).read.strip
end

ensure_pillar_is_generated
configure_vagrant

# vi: set ft=ruby :
